"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiffMergeApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class DiffMergeApi extends runtime.BaseAPI {
    /**
     * Diff a base commit and compare commit
     */
    diffRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling diff.');
            }
            if (requestParameters.baseCommitId === null || requestParameters.baseCommitId === undefined) {
                throw new runtime.RequiredError('baseCommitId', 'Required parameter requestParameters.baseCommitId was null or undefined when calling diff.');
            }
            if (requestParameters.compareCommitId === null || requestParameters.compareCommitId === undefined) {
                throw new runtime.RequiredError('compareCommitId', 'Required parameter requestParameters.compareCommitId was null or undefined when calling diff.');
            }
            const queryParameters = {};
            if (requestParameters.baseCommitId !== undefined) {
                queryParameters['baseCommitId'] = requestParameters.baseCommitId;
            }
            if (requestParameters.pageAfter !== undefined) {
                queryParameters['page[after]'] = requestParameters.pageAfter;
            }
            if (requestParameters.pageBefore !== undefined) {
                queryParameters['page[before]'] = requestParameters.pageBefore;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page[size]'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/commits/{compareCommitId}/diff`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"compareCommitId"}}`, encodeURIComponent(String(requestParameters.compareCommitId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Diff a base commit and compare commit
     */
    diff(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.diffRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Merge source commit(s) into a target branch
     */
    mergeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling merge.');
            }
            if (requestParameters.sourceCommitId === null || requestParameters.sourceCommitId === undefined) {
                throw new runtime.RequiredError('sourceCommitId', 'Required parameter requestParameters.sourceCommitId was null or undefined when calling merge.');
            }
            if (requestParameters.targetBranchId === null || requestParameters.targetBranchId === undefined) {
                throw new runtime.RequiredError('targetBranchId', 'Required parameter requestParameters.targetBranchId was null or undefined when calling merge.');
            }
            const queryParameters = {};
            if (requestParameters.sourceCommitId !== undefined) {
                queryParameters['sourceCommitId'] = requestParameters.sourceCommitId;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.pageAfter !== undefined) {
                queryParameters['page[after]'] = requestParameters.pageAfter;
            }
            if (requestParameters.pageBefore !== undefined) {
                queryParameters['page[before]'] = requestParameters.pageBefore;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page[size]'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/projects/{projectId}/branches/{targetBranchId}/merge`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"targetBranchId"}}`, encodeURIComponent(String(requestParameters.targetBranchId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CommitFromJSON)(jsonValue));
        });
    }
    /**
     * Merge source commit(s) into a target branch
     */
    merge(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mergeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.DiffMergeApi = DiffMergeApi;
