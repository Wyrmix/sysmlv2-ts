"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class QueryApi extends runtime.BaseAPI {
    /**
     * Delete query by project and ID
     */
    deleteQueryByProjectAndIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling deleteQueryByProjectAndId.');
            }
            if (requestParameters.queryId === null || requestParameters.queryId === undefined) {
                throw new runtime.RequiredError('queryId', 'Required parameter requestParameters.queryId was null or undefined when calling deleteQueryByProjectAndId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/queries/{queryId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"queryId"}}`, encodeURIComponent(String(requestParameters.queryId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QueryFromJSON)(jsonValue));
        });
    }
    /**
     * Delete query by project and ID
     */
    deleteQueryByProjectAndId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteQueryByProjectAndIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get queries by project
     */
    getQueriesByProjectRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getQueriesByProject.');
            }
            const queryParameters = {};
            if (requestParameters.pageAfter !== undefined) {
                queryParameters['page[after]'] = requestParameters.pageAfter;
            }
            if (requestParameters.pageBefore !== undefined) {
                queryParameters['page[before]'] = requestParameters.pageBefore;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page[size]'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/queries`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Get queries by project
     */
    getQueriesByProject(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getQueriesByProjectRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get query by project and ID
     */
    getQueryByProjectAndIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getQueryByProjectAndId.');
            }
            if (requestParameters.queryId === null || requestParameters.queryId === undefined) {
                throw new runtime.RequiredError('queryId', 'Required parameter requestParameters.queryId was null or undefined when calling getQueryByProjectAndId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/queries/{queryId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"queryId"}}`, encodeURIComponent(String(requestParameters.queryId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QueryFromJSON)(jsonValue));
        });
    }
    /**
     * Get query by project and ID
     */
    getQueryByProjectAndId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getQueryByProjectAndIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get query results by project and query definition
     */
    getQueryResultsByProjectIdQueryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getQueryResultsByProjectIdQuery.');
            }
            if (requestParameters.queryRequest === null || requestParameters.queryRequest === undefined) {
                throw new runtime.RequiredError('queryRequest', 'Required parameter requestParameters.queryRequest was null or undefined when calling getQueryResultsByProjectIdQuery.');
            }
            const queryParameters = {};
            if (requestParameters.commitId !== undefined) {
                queryParameters['commitId'] = requestParameters.commitId;
            }
            if (requestParameters.pageAfter !== undefined) {
                queryParameters['page[after]'] = requestParameters.pageAfter;
            }
            if (requestParameters.pageBefore !== undefined) {
                queryParameters['page[before]'] = requestParameters.pageBefore;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page[size]'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/projects/{projectId}/query-results`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.QueryRequestToJSON)(requestParameters.queryRequest),
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Get query results by project and query definition
     */
    getQueryResultsByProjectIdQuery(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getQueryResultsByProjectIdQueryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get query results by project and query
     */
    getQueryResultsByProjectIdQueryIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getQueryResultsByProjectIdQueryId.');
            }
            if (requestParameters.queryId === null || requestParameters.queryId === undefined) {
                throw new runtime.RequiredError('queryId', 'Required parameter requestParameters.queryId was null or undefined when calling getQueryResultsByProjectIdQueryId.');
            }
            const queryParameters = {};
            if (requestParameters.commitId !== undefined) {
                queryParameters['commitId'] = requestParameters.commitId;
            }
            if (requestParameters.pageAfter !== undefined) {
                queryParameters['page[after]'] = requestParameters.pageAfter;
            }
            if (requestParameters.pageBefore !== undefined) {
                queryParameters['page[before]'] = requestParameters.pageBefore;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page[size]'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/queries/{queryId}/results`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"queryId"}}`, encodeURIComponent(String(requestParameters.queryId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Get query results by project and query
     */
    getQueryResultsByProjectIdQueryId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getQueryResultsByProjectIdQueryIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * For compatibility with clients that don\'t support GET requests with a body
     * Get query results by project and query definition via POST
     */
    getQueryResultsByProjectIdQueryPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getQueryResultsByProjectIdQueryPost.');
            }
            if (requestParameters.queryRequest === null || requestParameters.queryRequest === undefined) {
                throw new runtime.RequiredError('queryRequest', 'Required parameter requestParameters.queryRequest was null or undefined when calling getQueryResultsByProjectIdQueryPost.');
            }
            const queryParameters = {};
            if (requestParameters.commitId !== undefined) {
                queryParameters['commitId'] = requestParameters.commitId;
            }
            if (requestParameters.pageAfter !== undefined) {
                queryParameters['page[after]'] = requestParameters.pageAfter;
            }
            if (requestParameters.pageBefore !== undefined) {
                queryParameters['page[before]'] = requestParameters.pageBefore;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page[size]'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/projects/{projectId}/query-results`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.QueryRequestToJSON)(requestParameters.queryRequest),
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * For compatibility with clients that don\'t support GET requests with a body
     * Get query results by project and query definition via POST
     */
    getQueryResultsByProjectIdQueryPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getQueryResultsByProjectIdQueryPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create query by project
     */
    postQueryByProjectRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling postQueryByProject.');
            }
            if (requestParameters.queryRequest === null || requestParameters.queryRequest === undefined) {
                throw new runtime.RequiredError('queryRequest', 'Required parameter requestParameters.queryRequest was null or undefined when calling postQueryByProject.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/projects/{projectId}/queries`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.QueryRequestToJSON)(requestParameters.queryRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QueryFromJSON)(jsonValue));
        });
    }
    /**
     * Create query by project
     */
    postQueryByProject(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postQueryByProjectRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update project by project and ID
     */
    putQueryByProjectAndIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling putQueryByProjectAndId.');
            }
            if (requestParameters.queryId === null || requestParameters.queryId === undefined) {
                throw new runtime.RequiredError('queryId', 'Required parameter requestParameters.queryId was null or undefined when calling putQueryByProjectAndId.');
            }
            if (requestParameters.queryRequest === null || requestParameters.queryRequest === undefined) {
                throw new runtime.RequiredError('queryRequest', 'Required parameter requestParameters.queryRequest was null or undefined when calling putQueryByProjectAndId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/projects/{projectId}/queries/{queryId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"queryId"}}`, encodeURIComponent(String(requestParameters.queryId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.QueryRequestToJSON)(requestParameters.queryRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QueryFromJSON)(jsonValue));
        });
    }
    /**
     * Update project by project and ID
     */
    putQueryByProjectAndId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putQueryByProjectAndIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.QueryApi = QueryApi;
