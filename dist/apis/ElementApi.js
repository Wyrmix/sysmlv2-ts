"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class ElementApi extends runtime.BaseAPI {
    /**
     * Get element by project, commit and ID
     */
    getElementByProjectCommitIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getElementByProjectCommitId.');
            }
            if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
                throw new runtime.RequiredError('commitId', 'Required parameter requestParameters.commitId was null or undefined when calling getElementByProjectCommitId.');
            }
            if (requestParameters.elementId === null || requestParameters.elementId === undefined) {
                throw new runtime.RequiredError('elementId', 'Required parameter requestParameters.elementId was null or undefined when calling getElementByProjectCommitId.');
            }
            const queryParameters = {};
            if (requestParameters.excludeUsed !== undefined) {
                queryParameters['excludeUsed'] = requestParameters.excludeUsed;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/commits/{commitId}/elements/{elementId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))).replace(`{${"elementId"}}`, encodeURIComponent(String(requestParameters.elementId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Get element by project, commit and ID
     */
    getElementByProjectCommitId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getElementByProjectCommitIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get elements by project and commit
     */
    getElementsByProjectCommitRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getElementsByProjectCommit.');
            }
            if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
                throw new runtime.RequiredError('commitId', 'Required parameter requestParameters.commitId was null or undefined when calling getElementsByProjectCommit.');
            }
            const queryParameters = {};
            if (requestParameters.excludeUsed !== undefined) {
                queryParameters['excludeUsed'] = requestParameters.excludeUsed;
            }
            if (requestParameters.pageAfter !== undefined) {
                queryParameters['page[after]'] = requestParameters.pageAfter;
            }
            if (requestParameters.pageBefore !== undefined) {
                queryParameters['page[before]'] = requestParameters.pageBefore;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page[size]'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/commits/{commitId}/elements`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Get elements by project and commit
     */
    getElementsByProjectCommit(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getElementsByProjectCommitRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get ProjectUsage that originates the provided element
     */
    getProjectUsageByProjectCommitElementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getProjectUsageByProjectCommitElement.');
            }
            if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
                throw new runtime.RequiredError('commitId', 'Required parameter requestParameters.commitId was null or undefined when calling getProjectUsageByProjectCommitElement.');
            }
            if (requestParameters.elementId === null || requestParameters.elementId === undefined) {
                throw new runtime.RequiredError('elementId', 'Required parameter requestParameters.elementId was null or undefined when calling getProjectUsageByProjectCommitElement.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/commits/{commitId}/elements/{elementId}/projectUsage`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))).replace(`{${"elementId"}}`, encodeURIComponent(String(requestParameters.elementId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProjectUsageFromJSON)(jsonValue));
        });
    }
    /**
     * Get ProjectUsage that originates the provided element
     */
    getProjectUsageByProjectCommitElement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getProjectUsageByProjectCommitElementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get root elements by project and commit
     */
    getRootsByProjectCommitRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling getRootsByProjectCommit.');
            }
            if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
                throw new runtime.RequiredError('commitId', 'Required parameter requestParameters.commitId was null or undefined when calling getRootsByProjectCommit.');
            }
            const queryParameters = {};
            if (requestParameters.excludeUsed !== undefined) {
                queryParameters['excludeUsed'] = requestParameters.excludeUsed;
            }
            if (requestParameters.pageAfter !== undefined) {
                queryParameters['page[after]'] = requestParameters.pageAfter;
            }
            if (requestParameters.pageBefore !== undefined) {
                queryParameters['page[before]'] = requestParameters.pageBefore;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page[size]'] = requestParameters.pageSize;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/projects/{projectId}/commits/{commitId}/roots`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * Get root elements by project and commit
     */
    getRootsByProjectCommit(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRootsByProjectCommitRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ElementApi = ElementApi;
