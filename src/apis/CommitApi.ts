/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Commit,
  CommitRequest,
  DataVersion,
} from '../models';
import {
    CommitFromJSON,
    CommitToJSON,
    CommitRequestFromJSON,
    CommitRequestToJSON,
    DataVersionFromJSON,
    DataVersionToJSON,
} from '../models';

export interface GetChangeByProjectCommitIdRequest {
    projectId: any;
    commitId: any;
    changeId: any;
}

export interface GetChangesByProjectCommitRequest {
    projectId: any;
    commitId: any;
    pageAfter?: any;
    pageBefore?: any;
    pageSize?: any;
}

export interface GetCommitByProjectAndIdRequest {
    projectId: any;
    commitId: any;
}

export interface GetCommitsByProjectRequest {
    projectId: any;
    pageAfter?: any;
    pageBefore?: any;
    pageSize?: any;
}

export interface PostCommitByProjectRequest {
    projectId: any;
    commitRequest: CommitRequest;
    branchId?: any;
}

/**
 * 
 */
export class CommitApi extends runtime.BaseAPI {

    /**
     * Get change by project, commit and ID
     */
    async getChangeByProjectCommitIdRaw(requestParameters: GetChangeByProjectCommitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataVersion>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getChangeByProjectCommitId.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getChangeByProjectCommitId.');
        }

        if (requestParameters.changeId === null || requestParameters.changeId === undefined) {
            throw new runtime.RequiredError('changeId','Required parameter requestParameters.changeId was null or undefined when calling getChangeByProjectCommitId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/commits/{commitId}/changes/{changeId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))).replace(`{${"changeId"}}`, encodeURIComponent(String(requestParameters.changeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataVersionFromJSON(jsonValue));
    }

    /**
     * Get change by project, commit and ID
     */
    async getChangeByProjectCommitId(requestParameters: GetChangeByProjectCommitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataVersion> {
        const response = await this.getChangeByProjectCommitIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get changes by project and commit
     */
    async getChangesByProjectCommitRaw(requestParameters: GetChangesByProjectCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getChangesByProjectCommit.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getChangesByProjectCommit.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageAfter !== undefined) {
            queryParameters['page[after]'] = requestParameters.pageAfter;
        }

        if (requestParameters.pageBefore !== undefined) {
            queryParameters['page[before]'] = requestParameters.pageBefore;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/commits/{commitId}/changes`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get changes by project and commit
     */
    async getChangesByProjectCommit(requestParameters: GetChangesByProjectCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getChangesByProjectCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get commit by project and ID
     */
    async getCommitByProjectAndIdRaw(requestParameters: GetCommitByProjectAndIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Commit>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getCommitByProjectAndId.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getCommitByProjectAndId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/commits/{commitId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitFromJSON(jsonValue));
    }

    /**
     * Get commit by project and ID
     */
    async getCommitByProjectAndId(requestParameters: GetCommitByProjectAndIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Commit> {
        const response = await this.getCommitByProjectAndIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get commits by project
     */
    async getCommitsByProjectRaw(requestParameters: GetCommitsByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getCommitsByProject.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageAfter !== undefined) {
            queryParameters['page[after]'] = requestParameters.pageAfter;
        }

        if (requestParameters.pageBefore !== undefined) {
            queryParameters['page[before]'] = requestParameters.pageBefore;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/commits`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get commits by project
     */
    async getCommitsByProject(requestParameters: GetCommitsByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getCommitsByProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create commit by project
     */
    async postCommitByProjectRaw(requestParameters: PostCommitByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Commit>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling postCommitByProject.');
        }

        if (requestParameters.commitRequest === null || requestParameters.commitRequest === undefined) {
            throw new runtime.RequiredError('commitRequest','Required parameter requestParameters.commitRequest was null or undefined when calling postCommitByProject.');
        }

        const queryParameters: any = {};

        if (requestParameters.branchId !== undefined) {
            queryParameters['branchId'] = requestParameters.branchId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/commits`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommitRequestToJSON(requestParameters.commitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitFromJSON(jsonValue));
    }

    /**
     * Create commit by project
     */
    async postCommitByProject(requestParameters: PostCommitByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Commit> {
        const response = await this.postCommitByProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
