/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Branch,
  BranchRequest,
} from '../models';
import {
    BranchFromJSON,
    BranchToJSON,
    BranchRequestFromJSON,
    BranchRequestToJSON,
} from '../models';

export interface DeleteBranchByProjectAndIdRequest {
    projectId: any;
    branchId: any;
}

export interface GetBranchesByProjectRequest {
    projectId: any;
    pageAfter?: any;
    pageBefore?: any;
    pageSize?: any;
}

export interface GetBranchesByProjectAndIdRequest {
    projectId: any;
    branchId: any;
}

export interface PostBranchByProjectRequest {
    projectId: any;
    branchRequest: BranchRequest;
}

/**
 * 
 */
export class BranchApi extends runtime.BaseAPI {

    /**
     * Delete branch by project and ID
     */
    async deleteBranchByProjectAndIdRaw(requestParameters: DeleteBranchByProjectAndIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Branch>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteBranchByProjectAndId.');
        }

        if (requestParameters.branchId === null || requestParameters.branchId === undefined) {
            throw new runtime.RequiredError('branchId','Required parameter requestParameters.branchId was null or undefined when calling deleteBranchByProjectAndId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/branches/{branchId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"branchId"}}`, encodeURIComponent(String(requestParameters.branchId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchFromJSON(jsonValue));
    }

    /**
     * Delete branch by project and ID
     */
    async deleteBranchByProjectAndId(requestParameters: DeleteBranchByProjectAndIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Branch> {
        const response = await this.deleteBranchByProjectAndIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get branches by project
     */
    async getBranchesByProjectRaw(requestParameters: GetBranchesByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getBranchesByProject.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageAfter !== undefined) {
            queryParameters['page[after]'] = requestParameters.pageAfter;
        }

        if (requestParameters.pageBefore !== undefined) {
            queryParameters['page[before]'] = requestParameters.pageBefore;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/branches`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get branches by project
     */
    async getBranchesByProject(requestParameters: GetBranchesByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getBranchesByProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get branch by project and ID
     */
    async getBranchesByProjectAndIdRaw(requestParameters: GetBranchesByProjectAndIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Branch>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getBranchesByProjectAndId.');
        }

        if (requestParameters.branchId === null || requestParameters.branchId === undefined) {
            throw new runtime.RequiredError('branchId','Required parameter requestParameters.branchId was null or undefined when calling getBranchesByProjectAndId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/branches/{branchId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"branchId"}}`, encodeURIComponent(String(requestParameters.branchId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchFromJSON(jsonValue));
    }

    /**
     * Get branch by project and ID
     */
    async getBranchesByProjectAndId(requestParameters: GetBranchesByProjectAndIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Branch> {
        const response = await this.getBranchesByProjectAndIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create branch by project
     */
    async postBranchByProjectRaw(requestParameters: PostBranchByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Branch>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling postBranchByProject.');
        }

        if (requestParameters.branchRequest === null || requestParameters.branchRequest === undefined) {
            throw new runtime.RequiredError('branchRequest','Required parameter requestParameters.branchRequest was null or undefined when calling postBranchByProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/branches`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BranchRequestToJSON(requestParameters.branchRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchFromJSON(jsonValue));
    }

    /**
     * Create branch by project
     */
    async postBranchByProject(requestParameters: PostBranchByProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Branch> {
        const response = await this.postBranchByProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
