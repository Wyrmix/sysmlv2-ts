/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetDatatypeById200Response,
  GetDatatypes200Response,
} from '../models';
import {
    GetDatatypeById200ResponseFromJSON,
    GetDatatypeById200ResponseToJSON,
    GetDatatypes200ResponseFromJSON,
    GetDatatypes200ResponseToJSON,
} from '../models';

export interface GetDatatypeByIdRequest {
    datatypeId: any;
}

export interface GetDatatypesRequest {
    pageAfter?: any;
    pageBefore?: any;
    pageSize?: any;
}

/**
 * 
 */
export class MetaApi extends runtime.BaseAPI {

    /**
     * Get datatype by ID
     */
    async getDatatypeByIdRaw(requestParameters: GetDatatypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDatatypeById200Response>> {
        if (requestParameters.datatypeId === null || requestParameters.datatypeId === undefined) {
            throw new runtime.RequiredError('datatypeId','Required parameter requestParameters.datatypeId was null or undefined when calling getDatatypeById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meta/datatypes/{datatypeId}`.replace(`{${"datatypeId"}}`, encodeURIComponent(String(requestParameters.datatypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDatatypeById200ResponseFromJSON(jsonValue));
    }

    /**
     * Get datatype by ID
     */
    async getDatatypeById(requestParameters: GetDatatypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDatatypeById200Response> {
        const response = await this.getDatatypeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get datatypes
     */
    async getDatatypesRaw(requestParameters: GetDatatypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDatatypes200Response>> {
        const queryParameters: any = {};

        if (requestParameters.pageAfter !== undefined) {
            queryParameters['page[after]'] = requestParameters.pageAfter;
        }

        if (requestParameters.pageBefore !== undefined) {
            queryParameters['page[before]'] = requestParameters.pageBefore;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meta/datatypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDatatypes200ResponseFromJSON(jsonValue));
    }

    /**
     * Get datatypes
     */
    async getDatatypes(requestParameters: GetDatatypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDatatypes200Response> {
        const response = await this.getDatatypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
