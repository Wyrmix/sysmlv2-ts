/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProjectUsage,
} from '../models';
import {
    ProjectUsageFromJSON,
    ProjectUsageToJSON,
} from '../models';

export interface GetElementByProjectCommitIdRequest {
    projectId: any;
    commitId: any;
    elementId: any;
    excludeUsed?: any;
}

export interface GetElementsByProjectCommitRequest {
    projectId: any;
    commitId: any;
    excludeUsed?: any;
    pageAfter?: any;
    pageBefore?: any;
    pageSize?: any;
}

export interface GetProjectUsageByProjectCommitElementRequest {
    projectId: any;
    commitId: any;
    elementId: any;
}

export interface GetRootsByProjectCommitRequest {
    projectId: any;
    commitId: any;
    excludeUsed?: any;
    pageAfter?: any;
    pageBefore?: any;
    pageSize?: any;
}

/**
 * 
 */
export class ElementApi extends runtime.BaseAPI {

    /**
     * Get element by project, commit and ID
     */
    async getElementByProjectCommitIdRaw(requestParameters: GetElementByProjectCommitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getElementByProjectCommitId.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getElementByProjectCommitId.');
        }

        if (requestParameters.elementId === null || requestParameters.elementId === undefined) {
            throw new runtime.RequiredError('elementId','Required parameter requestParameters.elementId was null or undefined when calling getElementByProjectCommitId.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeUsed !== undefined) {
            queryParameters['excludeUsed'] = requestParameters.excludeUsed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/commits/{commitId}/elements/{elementId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))).replace(`{${"elementId"}}`, encodeURIComponent(String(requestParameters.elementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get element by project, commit and ID
     */
    async getElementByProjectCommitId(requestParameters: GetElementByProjectCommitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getElementByProjectCommitIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get elements by project and commit
     */
    async getElementsByProjectCommitRaw(requestParameters: GetElementsByProjectCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getElementsByProjectCommit.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getElementsByProjectCommit.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeUsed !== undefined) {
            queryParameters['excludeUsed'] = requestParameters.excludeUsed;
        }

        if (requestParameters.pageAfter !== undefined) {
            queryParameters['page[after]'] = requestParameters.pageAfter;
        }

        if (requestParameters.pageBefore !== undefined) {
            queryParameters['page[before]'] = requestParameters.pageBefore;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/commits/{commitId}/elements`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get elements by project and commit
     */
    async getElementsByProjectCommit(requestParameters: GetElementsByProjectCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getElementsByProjectCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ProjectUsage that originates the provided element
     */
    async getProjectUsageByProjectCommitElementRaw(requestParameters: GetProjectUsageByProjectCommitElementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectUsage>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectUsageByProjectCommitElement.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getProjectUsageByProjectCommitElement.');
        }

        if (requestParameters.elementId === null || requestParameters.elementId === undefined) {
            throw new runtime.RequiredError('elementId','Required parameter requestParameters.elementId was null or undefined when calling getProjectUsageByProjectCommitElement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/commits/{commitId}/elements/{elementId}/projectUsage`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))).replace(`{${"elementId"}}`, encodeURIComponent(String(requestParameters.elementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectUsageFromJSON(jsonValue));
    }

    /**
     * Get ProjectUsage that originates the provided element
     */
    async getProjectUsageByProjectCommitElement(requestParameters: GetProjectUsageByProjectCommitElementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectUsage> {
        const response = await this.getProjectUsageByProjectCommitElementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get root elements by project and commit
     */
    async getRootsByProjectCommitRaw(requestParameters: GetRootsByProjectCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getRootsByProjectCommit.');
        }

        if (requestParameters.commitId === null || requestParameters.commitId === undefined) {
            throw new runtime.RequiredError('commitId','Required parameter requestParameters.commitId was null or undefined when calling getRootsByProjectCommit.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeUsed !== undefined) {
            queryParameters['excludeUsed'] = requestParameters.excludeUsed;
        }

        if (requestParameters.pageAfter !== undefined) {
            queryParameters['page[after]'] = requestParameters.pageAfter;
        }

        if (requestParameters.pageBefore !== undefined) {
            queryParameters['page[before]'] = requestParameters.pageBefore;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page[size]'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/commits/{commitId}/roots`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters.commitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get root elements by project and commit
     */
    async getRootsByProjectCommit(requestParameters: GetRootsByProjectCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getRootsByProjectCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
