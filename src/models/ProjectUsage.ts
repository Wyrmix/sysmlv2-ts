/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Identified } from './Identified';
import {
    IdentifiedFromJSON,
    IdentifiedFromJSONTyped,
    IdentifiedToJSON,
} from './Identified';

/**
 * 
 * @export
 * @interface ProjectUsage
 */
export interface ProjectUsage {
    /**
     * 
     * @type {any}
     * @memberof ProjectUsage
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof ProjectUsage
     */
    atType: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof ProjectUsage
     */
    usedCommit: Identified;
    /**
     * 
     * @type {Identified}
     * @memberof ProjectUsage
     */
    usedProject: Identified;
}

/**
 * Check if a given object implements the ProjectUsage interface.
 */
export function instanceOfProjectUsage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "usedCommit" in value;
    isInstance = isInstance && "usedProject" in value;

    return isInstance;
}

export function ProjectUsageFromJSON(json: any): ProjectUsage {
    return ProjectUsageFromJSONTyped(json, false);
}

export function ProjectUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectUsage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['@id'],
        'atType': json['@type'],
        'usedCommit': IdentifiedFromJSON(json['usedCommit']),
        'usedProject': IdentifiedFromJSON(json['usedProject']),
    };
}

export function ProjectUsageToJSON(value?: ProjectUsage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '@id': value.id,
        '@type': value.atType,
        'usedCommit': IdentifiedToJSON(value.usedCommit),
        'usedProject': IdentifiedToJSON(value.usedProject),
    };
}

