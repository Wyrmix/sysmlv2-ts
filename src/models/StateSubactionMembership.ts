/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Identified } from './Identified';
import {
    IdentifiedFromJSON,
    IdentifiedFromJSONTyped,
    IdentifiedToJSON,
} from './Identified';

/**
 * 
 * @export
 * @interface StateSubactionMembership
 */
export interface StateSubactionMembership {
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    atType: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof StateSubactionMembership
     */
    action: Identified;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    aliasIds: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    declaredName: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    declaredShortName: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    documentation: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    elementId: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof StateSubactionMembership
     */
    feature: Identified;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    isImplied: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    isImpliedIncluded: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    isLibraryElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    kind: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof StateSubactionMembership
     */
    memberElement: Identified;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    memberElementId: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    memberName: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    memberShortName: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof StateSubactionMembership
     */
    membershipOwningNamespace: Identified;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    ownedAnnotation: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    ownedElement: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof StateSubactionMembership
     */
    ownedMemberElement: Identified;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    ownedMemberElementId: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof StateSubactionMembership
     */
    ownedMemberFeature: Identified;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    ownedMemberName: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    ownedMemberShortName: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    ownedRelatedElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    ownedRelationship: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    owner: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    owningMembership: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    owningNamespace: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    owningRelatedElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    owningRelationship: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof StateSubactionMembership
     */
    owningType: Identified;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    qualifiedName: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    relatedElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    shortName: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    source: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    target: any | null;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    textualRepresentation: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof StateSubactionMembership
     */
    type: Identified;
    /**
     * 
     * @type {any}
     * @memberof StateSubactionMembership
     */
    visibility: any | null;
}

/**
 * Check if a given object implements the StateSubactionMembership interface.
 */
export function instanceOfStateSubactionMembership(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "aliasIds" in value;
    isInstance = isInstance && "declaredName" in value;
    isInstance = isInstance && "declaredShortName" in value;
    isInstance = isInstance && "documentation" in value;
    isInstance = isInstance && "elementId" in value;
    isInstance = isInstance && "feature" in value;
    isInstance = isInstance && "isImplied" in value;
    isInstance = isInstance && "isImpliedIncluded" in value;
    isInstance = isInstance && "isLibraryElement" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "memberElement" in value;
    isInstance = isInstance && "memberElementId" in value;
    isInstance = isInstance && "memberName" in value;
    isInstance = isInstance && "memberShortName" in value;
    isInstance = isInstance && "membershipOwningNamespace" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ownedAnnotation" in value;
    isInstance = isInstance && "ownedElement" in value;
    isInstance = isInstance && "ownedMemberElement" in value;
    isInstance = isInstance && "ownedMemberElementId" in value;
    isInstance = isInstance && "ownedMemberFeature" in value;
    isInstance = isInstance && "ownedMemberName" in value;
    isInstance = isInstance && "ownedMemberShortName" in value;
    isInstance = isInstance && "ownedRelatedElement" in value;
    isInstance = isInstance && "ownedRelationship" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "owningMembership" in value;
    isInstance = isInstance && "owningNamespace" in value;
    isInstance = isInstance && "owningRelatedElement" in value;
    isInstance = isInstance && "owningRelationship" in value;
    isInstance = isInstance && "owningType" in value;
    isInstance = isInstance && "qualifiedName" in value;
    isInstance = isInstance && "relatedElement" in value;
    isInstance = isInstance && "shortName" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "target" in value;
    isInstance = isInstance && "textualRepresentation" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "visibility" in value;

    return isInstance;
}

export function StateSubactionMembershipFromJSON(json: any): StateSubactionMembership {
    return StateSubactionMembershipFromJSONTyped(json, false);
}

export function StateSubactionMembershipFromJSONTyped(json: any, ignoreDiscriminator: boolean): StateSubactionMembership {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['@id'],
        'atType': json['@type'],
        'action': IdentifiedFromJSON(json['action']),
        'aliasIds': json['aliasIds'],
        'declaredName': json['declaredName'],
        'declaredShortName': json['declaredShortName'],
        'documentation': json['documentation'],
        'elementId': json['elementId'],
        'feature': IdentifiedFromJSON(json['feature']),
        'isImplied': json['isImplied'],
        'isImpliedIncluded': json['isImpliedIncluded'],
        'isLibraryElement': json['isLibraryElement'],
        'kind': json['kind'],
        'memberElement': IdentifiedFromJSON(json['memberElement']),
        'memberElementId': json['memberElementId'],
        'memberName': json['memberName'],
        'memberShortName': json['memberShortName'],
        'membershipOwningNamespace': IdentifiedFromJSON(json['membershipOwningNamespace']),
        'name': json['name'],
        'ownedAnnotation': json['ownedAnnotation'],
        'ownedElement': json['ownedElement'],
        'ownedMemberElement': IdentifiedFromJSON(json['ownedMemberElement']),
        'ownedMemberElementId': json['ownedMemberElementId'],
        'ownedMemberFeature': IdentifiedFromJSON(json['ownedMemberFeature']),
        'ownedMemberName': json['ownedMemberName'],
        'ownedMemberShortName': json['ownedMemberShortName'],
        'ownedRelatedElement': json['ownedRelatedElement'],
        'ownedRelationship': json['ownedRelationship'],
        'owner': json['owner'],
        'owningMembership': json['owningMembership'],
        'owningNamespace': json['owningNamespace'],
        'owningRelatedElement': json['owningRelatedElement'],
        'owningRelationship': json['owningRelationship'],
        'owningType': IdentifiedFromJSON(json['owningType']),
        'qualifiedName': json['qualifiedName'],
        'relatedElement': json['relatedElement'],
        'shortName': json['shortName'],
        'source': json['source'],
        'target': json['target'],
        'textualRepresentation': json['textualRepresentation'],
        'type': IdentifiedFromJSON(json['type']),
        'visibility': json['visibility'],
    };
}

export function StateSubactionMembershipToJSON(value?: StateSubactionMembership | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '@id': value.id,
        '@type': value.atType,
        'action': IdentifiedToJSON(value.action),
        'aliasIds': value.aliasIds,
        'declaredName': value.declaredName,
        'declaredShortName': value.declaredShortName,
        'documentation': value.documentation,
        'elementId': value.elementId,
        'feature': IdentifiedToJSON(value.feature),
        'isImplied': value.isImplied,
        'isImpliedIncluded': value.isImpliedIncluded,
        'isLibraryElement': value.isLibraryElement,
        'kind': value.kind,
        'memberElement': IdentifiedToJSON(value.memberElement),
        'memberElementId': value.memberElementId,
        'memberName': value.memberName,
        'memberShortName': value.memberShortName,
        'membershipOwningNamespace': IdentifiedToJSON(value.membershipOwningNamespace),
        'name': value.name,
        'ownedAnnotation': value.ownedAnnotation,
        'ownedElement': value.ownedElement,
        'ownedMemberElement': IdentifiedToJSON(value.ownedMemberElement),
        'ownedMemberElementId': value.ownedMemberElementId,
        'ownedMemberFeature': IdentifiedToJSON(value.ownedMemberFeature),
        'ownedMemberName': value.ownedMemberName,
        'ownedMemberShortName': value.ownedMemberShortName,
        'ownedRelatedElement': value.ownedRelatedElement,
        'ownedRelationship': value.ownedRelationship,
        'owner': value.owner,
        'owningMembership': value.owningMembership,
        'owningNamespace': value.owningNamespace,
        'owningRelatedElement': value.owningRelatedElement,
        'owningRelationship': value.owningRelationship,
        'owningType': IdentifiedToJSON(value.owningType),
        'qualifiedName': value.qualifiedName,
        'relatedElement': value.relatedElement,
        'shortName': value.shortName,
        'source': value.source,
        'target': value.target,
        'textualRepresentation': value.textualRepresentation,
        'type': IdentifiedToJSON(value.type),
        'visibility': value.visibility,
    };
}

