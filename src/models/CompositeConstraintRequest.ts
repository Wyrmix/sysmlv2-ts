/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CompositeConstraintRequest
 */
export interface CompositeConstraintRequest {
    /**
     * 
     * @type {any}
     * @memberof CompositeConstraintRequest
     */
    atType: any | null;
    /**
     * 
     * @type {any}
     * @memberof CompositeConstraintRequest
     */
    constraint: any | null;
    /**
     * 
     * @type {any}
     * @memberof CompositeConstraintRequest
     */
    operator: CompositeConstraintRequestOperatorEnum;
}


/**
 * @export
 */
export const CompositeConstraintRequestOperatorEnum = {
    And: 'and',
    Or: 'or'
} as const;
export type CompositeConstraintRequestOperatorEnum = typeof CompositeConstraintRequestOperatorEnum[keyof typeof CompositeConstraintRequestOperatorEnum];


/**
 * Check if a given object implements the CompositeConstraintRequest interface.
 */
export function instanceOfCompositeConstraintRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "constraint" in value;
    isInstance = isInstance && "operator" in value;

    return isInstance;
}

export function CompositeConstraintRequestFromJSON(json: any): CompositeConstraintRequest {
    return CompositeConstraintRequestFromJSONTyped(json, false);
}

export function CompositeConstraintRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompositeConstraintRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'atType': json['@type'],
        'constraint': json['constraint'],
        'operator': json['operator'],
    };
}

export function CompositeConstraintRequestToJSON(value?: CompositeConstraintRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '@type': value.atType,
        'constraint': value.constraint,
        'operator': value.operator,
    };
}

