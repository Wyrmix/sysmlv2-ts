/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Identified } from './Identified';
import {
    IdentifiedFromJSON,
    IdentifiedFromJSONTyped,
    IdentifiedToJSON,
} from './Identified';

/**
 * 
 * @export
 * @interface ConcernDefinition
 */
export interface ConcernDefinition {
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    atType: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    actorParameter: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    aliasIds: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    assumedConstraint: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    declaredName: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    declaredShortName: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    differencingType: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    directedFeature: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    directedUsage: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    documentation: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    elementId: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    endFeature: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    expression: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    feature: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    featureMembership: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    framedConcern: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    importedMembership: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    inheritedFeature: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    inheritedMembership: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    input: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    intersectingType: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    isAbstract: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    isConjugated: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    isImpliedIncluded: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    isIndividual: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    isLibraryElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    isModelLevelEvaluable: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    isSufficient: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    isVariation: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    lifeClass: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    member: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    membership: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    multiplicity: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    output: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedAction: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedAllocation: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedAnalysisCase: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedAnnotation: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedAttribute: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedCalculation: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedCase: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedConcern: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedConjugator: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedConnection: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedConstraint: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedDifferencing: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedDisjoining: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedEndFeature: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedEnumeration: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedFeature: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedFeatureMembership: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedFlow: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedImport: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedInterface: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedIntersecting: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedItem: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedMember: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedMembership: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedMetadata: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedOccurrence: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedPart: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedPort: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedReference: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedRelationship: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedRendering: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedRequirement: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedSpecialization: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedState: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedSubclassification: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedTransition: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedUnioning: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedUsage: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedUseCase: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedVerificationCase: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedView: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    ownedViewpoint: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    owner: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    owningMembership: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    owningNamespace: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    owningRelationship: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    parameter: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    qualifiedName: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    reqId: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    requiredConstraint: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof ConcernDefinition
     */
    result: Identified;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    shortName: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    stakeholderParameter: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    step: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof ConcernDefinition
     */
    subjectParameter: Identified;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    text: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    textualRepresentation: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    unioningType: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    usage: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    variant: any | null;
    /**
     * 
     * @type {any}
     * @memberof ConcernDefinition
     */
    variantMembership: any | null;
}

/**
 * Check if a given object implements the ConcernDefinition interface.
 */
export function instanceOfConcernDefinition(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "actorParameter" in value;
    isInstance = isInstance && "aliasIds" in value;
    isInstance = isInstance && "assumedConstraint" in value;
    isInstance = isInstance && "declaredName" in value;
    isInstance = isInstance && "declaredShortName" in value;
    isInstance = isInstance && "differencingType" in value;
    isInstance = isInstance && "directedFeature" in value;
    isInstance = isInstance && "directedUsage" in value;
    isInstance = isInstance && "documentation" in value;
    isInstance = isInstance && "elementId" in value;
    isInstance = isInstance && "endFeature" in value;
    isInstance = isInstance && "expression" in value;
    isInstance = isInstance && "feature" in value;
    isInstance = isInstance && "featureMembership" in value;
    isInstance = isInstance && "framedConcern" in value;
    isInstance = isInstance && "importedMembership" in value;
    isInstance = isInstance && "inheritedFeature" in value;
    isInstance = isInstance && "inheritedMembership" in value;
    isInstance = isInstance && "input" in value;
    isInstance = isInstance && "intersectingType" in value;
    isInstance = isInstance && "isAbstract" in value;
    isInstance = isInstance && "isConjugated" in value;
    isInstance = isInstance && "isImpliedIncluded" in value;
    isInstance = isInstance && "isIndividual" in value;
    isInstance = isInstance && "isLibraryElement" in value;
    isInstance = isInstance && "isModelLevelEvaluable" in value;
    isInstance = isInstance && "isSufficient" in value;
    isInstance = isInstance && "isVariation" in value;
    isInstance = isInstance && "lifeClass" in value;
    isInstance = isInstance && "member" in value;
    isInstance = isInstance && "membership" in value;
    isInstance = isInstance && "multiplicity" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "output" in value;
    isInstance = isInstance && "ownedAction" in value;
    isInstance = isInstance && "ownedAllocation" in value;
    isInstance = isInstance && "ownedAnalysisCase" in value;
    isInstance = isInstance && "ownedAnnotation" in value;
    isInstance = isInstance && "ownedAttribute" in value;
    isInstance = isInstance && "ownedCalculation" in value;
    isInstance = isInstance && "ownedCase" in value;
    isInstance = isInstance && "ownedConcern" in value;
    isInstance = isInstance && "ownedConjugator" in value;
    isInstance = isInstance && "ownedConnection" in value;
    isInstance = isInstance && "ownedConstraint" in value;
    isInstance = isInstance && "ownedDifferencing" in value;
    isInstance = isInstance && "ownedDisjoining" in value;
    isInstance = isInstance && "ownedElement" in value;
    isInstance = isInstance && "ownedEndFeature" in value;
    isInstance = isInstance && "ownedEnumeration" in value;
    isInstance = isInstance && "ownedFeature" in value;
    isInstance = isInstance && "ownedFeatureMembership" in value;
    isInstance = isInstance && "ownedFlow" in value;
    isInstance = isInstance && "ownedImport" in value;
    isInstance = isInstance && "ownedInterface" in value;
    isInstance = isInstance && "ownedIntersecting" in value;
    isInstance = isInstance && "ownedItem" in value;
    isInstance = isInstance && "ownedMember" in value;
    isInstance = isInstance && "ownedMembership" in value;
    isInstance = isInstance && "ownedMetadata" in value;
    isInstance = isInstance && "ownedOccurrence" in value;
    isInstance = isInstance && "ownedPart" in value;
    isInstance = isInstance && "ownedPort" in value;
    isInstance = isInstance && "ownedReference" in value;
    isInstance = isInstance && "ownedRelationship" in value;
    isInstance = isInstance && "ownedRendering" in value;
    isInstance = isInstance && "ownedRequirement" in value;
    isInstance = isInstance && "ownedSpecialization" in value;
    isInstance = isInstance && "ownedState" in value;
    isInstance = isInstance && "ownedSubclassification" in value;
    isInstance = isInstance && "ownedTransition" in value;
    isInstance = isInstance && "ownedUnioning" in value;
    isInstance = isInstance && "ownedUsage" in value;
    isInstance = isInstance && "ownedUseCase" in value;
    isInstance = isInstance && "ownedVerificationCase" in value;
    isInstance = isInstance && "ownedView" in value;
    isInstance = isInstance && "ownedViewpoint" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "owningMembership" in value;
    isInstance = isInstance && "owningNamespace" in value;
    isInstance = isInstance && "owningRelationship" in value;
    isInstance = isInstance && "parameter" in value;
    isInstance = isInstance && "qualifiedName" in value;
    isInstance = isInstance && "reqId" in value;
    isInstance = isInstance && "requiredConstraint" in value;
    isInstance = isInstance && "result" in value;
    isInstance = isInstance && "shortName" in value;
    isInstance = isInstance && "stakeholderParameter" in value;
    isInstance = isInstance && "step" in value;
    isInstance = isInstance && "subjectParameter" in value;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "textualRepresentation" in value;
    isInstance = isInstance && "unioningType" in value;
    isInstance = isInstance && "usage" in value;
    isInstance = isInstance && "variant" in value;
    isInstance = isInstance && "variantMembership" in value;

    return isInstance;
}

export function ConcernDefinitionFromJSON(json: any): ConcernDefinition {
    return ConcernDefinitionFromJSONTyped(json, false);
}

export function ConcernDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConcernDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['@id'],
        'atType': json['@type'],
        'actorParameter': json['actorParameter'],
        'aliasIds': json['aliasIds'],
        'assumedConstraint': json['assumedConstraint'],
        'declaredName': json['declaredName'],
        'declaredShortName': json['declaredShortName'],
        'differencingType': json['differencingType'],
        'directedFeature': json['directedFeature'],
        'directedUsage': json['directedUsage'],
        'documentation': json['documentation'],
        'elementId': json['elementId'],
        'endFeature': json['endFeature'],
        'expression': json['expression'],
        'feature': json['feature'],
        'featureMembership': json['featureMembership'],
        'framedConcern': json['framedConcern'],
        'importedMembership': json['importedMembership'],
        'inheritedFeature': json['inheritedFeature'],
        'inheritedMembership': json['inheritedMembership'],
        'input': json['input'],
        'intersectingType': json['intersectingType'],
        'isAbstract': json['isAbstract'],
        'isConjugated': json['isConjugated'],
        'isImpliedIncluded': json['isImpliedIncluded'],
        'isIndividual': json['isIndividual'],
        'isLibraryElement': json['isLibraryElement'],
        'isModelLevelEvaluable': json['isModelLevelEvaluable'],
        'isSufficient': json['isSufficient'],
        'isVariation': json['isVariation'],
        'lifeClass': json['lifeClass'],
        'member': json['member'],
        'membership': json['membership'],
        'multiplicity': json['multiplicity'],
        'name': json['name'],
        'output': json['output'],
        'ownedAction': json['ownedAction'],
        'ownedAllocation': json['ownedAllocation'],
        'ownedAnalysisCase': json['ownedAnalysisCase'],
        'ownedAnnotation': json['ownedAnnotation'],
        'ownedAttribute': json['ownedAttribute'],
        'ownedCalculation': json['ownedCalculation'],
        'ownedCase': json['ownedCase'],
        'ownedConcern': json['ownedConcern'],
        'ownedConjugator': json['ownedConjugator'],
        'ownedConnection': json['ownedConnection'],
        'ownedConstraint': json['ownedConstraint'],
        'ownedDifferencing': json['ownedDifferencing'],
        'ownedDisjoining': json['ownedDisjoining'],
        'ownedElement': json['ownedElement'],
        'ownedEndFeature': json['ownedEndFeature'],
        'ownedEnumeration': json['ownedEnumeration'],
        'ownedFeature': json['ownedFeature'],
        'ownedFeatureMembership': json['ownedFeatureMembership'],
        'ownedFlow': json['ownedFlow'],
        'ownedImport': json['ownedImport'],
        'ownedInterface': json['ownedInterface'],
        'ownedIntersecting': json['ownedIntersecting'],
        'ownedItem': json['ownedItem'],
        'ownedMember': json['ownedMember'],
        'ownedMembership': json['ownedMembership'],
        'ownedMetadata': json['ownedMetadata'],
        'ownedOccurrence': json['ownedOccurrence'],
        'ownedPart': json['ownedPart'],
        'ownedPort': json['ownedPort'],
        'ownedReference': json['ownedReference'],
        'ownedRelationship': json['ownedRelationship'],
        'ownedRendering': json['ownedRendering'],
        'ownedRequirement': json['ownedRequirement'],
        'ownedSpecialization': json['ownedSpecialization'],
        'ownedState': json['ownedState'],
        'ownedSubclassification': json['ownedSubclassification'],
        'ownedTransition': json['ownedTransition'],
        'ownedUnioning': json['ownedUnioning'],
        'ownedUsage': json['ownedUsage'],
        'ownedUseCase': json['ownedUseCase'],
        'ownedVerificationCase': json['ownedVerificationCase'],
        'ownedView': json['ownedView'],
        'ownedViewpoint': json['ownedViewpoint'],
        'owner': json['owner'],
        'owningMembership': json['owningMembership'],
        'owningNamespace': json['owningNamespace'],
        'owningRelationship': json['owningRelationship'],
        'parameter': json['parameter'],
        'qualifiedName': json['qualifiedName'],
        'reqId': json['reqId'],
        'requiredConstraint': json['requiredConstraint'],
        'result': IdentifiedFromJSON(json['result']),
        'shortName': json['shortName'],
        'stakeholderParameter': json['stakeholderParameter'],
        'step': json['step'],
        'subjectParameter': IdentifiedFromJSON(json['subjectParameter']),
        'text': json['text'],
        'textualRepresentation': json['textualRepresentation'],
        'unioningType': json['unioningType'],
        'usage': json['usage'],
        'variant': json['variant'],
        'variantMembership': json['variantMembership'],
    };
}

export function ConcernDefinitionToJSON(value?: ConcernDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '@id': value.id,
        '@type': value.atType,
        'actorParameter': value.actorParameter,
        'aliasIds': value.aliasIds,
        'assumedConstraint': value.assumedConstraint,
        'declaredName': value.declaredName,
        'declaredShortName': value.declaredShortName,
        'differencingType': value.differencingType,
        'directedFeature': value.directedFeature,
        'directedUsage': value.directedUsage,
        'documentation': value.documentation,
        'elementId': value.elementId,
        'endFeature': value.endFeature,
        'expression': value.expression,
        'feature': value.feature,
        'featureMembership': value.featureMembership,
        'framedConcern': value.framedConcern,
        'importedMembership': value.importedMembership,
        'inheritedFeature': value.inheritedFeature,
        'inheritedMembership': value.inheritedMembership,
        'input': value.input,
        'intersectingType': value.intersectingType,
        'isAbstract': value.isAbstract,
        'isConjugated': value.isConjugated,
        'isImpliedIncluded': value.isImpliedIncluded,
        'isIndividual': value.isIndividual,
        'isLibraryElement': value.isLibraryElement,
        'isModelLevelEvaluable': value.isModelLevelEvaluable,
        'isSufficient': value.isSufficient,
        'isVariation': value.isVariation,
        'lifeClass': value.lifeClass,
        'member': value.member,
        'membership': value.membership,
        'multiplicity': value.multiplicity,
        'name': value.name,
        'output': value.output,
        'ownedAction': value.ownedAction,
        'ownedAllocation': value.ownedAllocation,
        'ownedAnalysisCase': value.ownedAnalysisCase,
        'ownedAnnotation': value.ownedAnnotation,
        'ownedAttribute': value.ownedAttribute,
        'ownedCalculation': value.ownedCalculation,
        'ownedCase': value.ownedCase,
        'ownedConcern': value.ownedConcern,
        'ownedConjugator': value.ownedConjugator,
        'ownedConnection': value.ownedConnection,
        'ownedConstraint': value.ownedConstraint,
        'ownedDifferencing': value.ownedDifferencing,
        'ownedDisjoining': value.ownedDisjoining,
        'ownedElement': value.ownedElement,
        'ownedEndFeature': value.ownedEndFeature,
        'ownedEnumeration': value.ownedEnumeration,
        'ownedFeature': value.ownedFeature,
        'ownedFeatureMembership': value.ownedFeatureMembership,
        'ownedFlow': value.ownedFlow,
        'ownedImport': value.ownedImport,
        'ownedInterface': value.ownedInterface,
        'ownedIntersecting': value.ownedIntersecting,
        'ownedItem': value.ownedItem,
        'ownedMember': value.ownedMember,
        'ownedMembership': value.ownedMembership,
        'ownedMetadata': value.ownedMetadata,
        'ownedOccurrence': value.ownedOccurrence,
        'ownedPart': value.ownedPart,
        'ownedPort': value.ownedPort,
        'ownedReference': value.ownedReference,
        'ownedRelationship': value.ownedRelationship,
        'ownedRendering': value.ownedRendering,
        'ownedRequirement': value.ownedRequirement,
        'ownedSpecialization': value.ownedSpecialization,
        'ownedState': value.ownedState,
        'ownedSubclassification': value.ownedSubclassification,
        'ownedTransition': value.ownedTransition,
        'ownedUnioning': value.ownedUnioning,
        'ownedUsage': value.ownedUsage,
        'ownedUseCase': value.ownedUseCase,
        'ownedVerificationCase': value.ownedVerificationCase,
        'ownedView': value.ownedView,
        'ownedViewpoint': value.ownedViewpoint,
        'owner': value.owner,
        'owningMembership': value.owningMembership,
        'owningNamespace': value.owningNamespace,
        'owningRelationship': value.owningRelationship,
        'parameter': value.parameter,
        'qualifiedName': value.qualifiedName,
        'reqId': value.reqId,
        'requiredConstraint': value.requiredConstraint,
        'result': IdentifiedToJSON(value.result),
        'shortName': value.shortName,
        'stakeholderParameter': value.stakeholderParameter,
        'step': value.step,
        'subjectParameter': IdentifiedToJSON(value.subjectParameter),
        'text': value.text,
        'textualRepresentation': value.textualRepresentation,
        'unioningType': value.unioningType,
        'usage': value.usage,
        'variant': value.variant,
        'variantMembership': value.variantMembership,
    };
}

