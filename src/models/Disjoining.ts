/* tslint:disable */
/* eslint-disable */
/**
 * Systems Modeling API and Services
 * REST/HTTP platform specific model (PSM) for the Systems Modeling API and Services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Identified } from './Identified';
import {
    IdentifiedFromJSON,
    IdentifiedFromJSONTyped,
    IdentifiedToJSON,
} from './Identified';

/**
 * 
 * @export
 * @interface Disjoining
 */
export interface Disjoining {
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    atType: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    aliasIds: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    declaredName: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    declaredShortName: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof Disjoining
     */
    disjoiningType: Identified;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    documentation: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    elementId: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    isImplied: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    isImpliedIncluded: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    isLibraryElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    ownedAnnotation: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    ownedElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    ownedRelatedElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    ownedRelationship: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    owner: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    owningMembership: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    owningNamespace: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    owningRelatedElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    owningRelationship: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    owningType: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    qualifiedName: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    relatedElement: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    shortName: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    source: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    target: any | null;
    /**
     * 
     * @type {any}
     * @memberof Disjoining
     */
    textualRepresentation: any | null;
    /**
     * 
     * @type {Identified}
     * @memberof Disjoining
     */
    typeDisjoined: Identified;
}

/**
 * Check if a given object implements the Disjoining interface.
 */
export function instanceOfDisjoining(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "aliasIds" in value;
    isInstance = isInstance && "declaredName" in value;
    isInstance = isInstance && "declaredShortName" in value;
    isInstance = isInstance && "disjoiningType" in value;
    isInstance = isInstance && "documentation" in value;
    isInstance = isInstance && "elementId" in value;
    isInstance = isInstance && "isImplied" in value;
    isInstance = isInstance && "isImpliedIncluded" in value;
    isInstance = isInstance && "isLibraryElement" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ownedAnnotation" in value;
    isInstance = isInstance && "ownedElement" in value;
    isInstance = isInstance && "ownedRelatedElement" in value;
    isInstance = isInstance && "ownedRelationship" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "owningMembership" in value;
    isInstance = isInstance && "owningNamespace" in value;
    isInstance = isInstance && "owningRelatedElement" in value;
    isInstance = isInstance && "owningRelationship" in value;
    isInstance = isInstance && "owningType" in value;
    isInstance = isInstance && "qualifiedName" in value;
    isInstance = isInstance && "relatedElement" in value;
    isInstance = isInstance && "shortName" in value;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "target" in value;
    isInstance = isInstance && "textualRepresentation" in value;
    isInstance = isInstance && "typeDisjoined" in value;

    return isInstance;
}

export function DisjoiningFromJSON(json: any): Disjoining {
    return DisjoiningFromJSONTyped(json, false);
}

export function DisjoiningFromJSONTyped(json: any, ignoreDiscriminator: boolean): Disjoining {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['@id'],
        'atType': json['@type'],
        'aliasIds': json['aliasIds'],
        'declaredName': json['declaredName'],
        'declaredShortName': json['declaredShortName'],
        'disjoiningType': IdentifiedFromJSON(json['disjoiningType']),
        'documentation': json['documentation'],
        'elementId': json['elementId'],
        'isImplied': json['isImplied'],
        'isImpliedIncluded': json['isImpliedIncluded'],
        'isLibraryElement': json['isLibraryElement'],
        'name': json['name'],
        'ownedAnnotation': json['ownedAnnotation'],
        'ownedElement': json['ownedElement'],
        'ownedRelatedElement': json['ownedRelatedElement'],
        'ownedRelationship': json['ownedRelationship'],
        'owner': json['owner'],
        'owningMembership': json['owningMembership'],
        'owningNamespace': json['owningNamespace'],
        'owningRelatedElement': json['owningRelatedElement'],
        'owningRelationship': json['owningRelationship'],
        'owningType': json['owningType'],
        'qualifiedName': json['qualifiedName'],
        'relatedElement': json['relatedElement'],
        'shortName': json['shortName'],
        'source': json['source'],
        'target': json['target'],
        'textualRepresentation': json['textualRepresentation'],
        'typeDisjoined': IdentifiedFromJSON(json['typeDisjoined']),
    };
}

export function DisjoiningToJSON(value?: Disjoining | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '@id': value.id,
        '@type': value.atType,
        'aliasIds': value.aliasIds,
        'declaredName': value.declaredName,
        'declaredShortName': value.declaredShortName,
        'disjoiningType': IdentifiedToJSON(value.disjoiningType),
        'documentation': value.documentation,
        'elementId': value.elementId,
        'isImplied': value.isImplied,
        'isImpliedIncluded': value.isImpliedIncluded,
        'isLibraryElement': value.isLibraryElement,
        'name': value.name,
        'ownedAnnotation': value.ownedAnnotation,
        'ownedElement': value.ownedElement,
        'ownedRelatedElement': value.ownedRelatedElement,
        'ownedRelationship': value.ownedRelationship,
        'owner': value.owner,
        'owningMembership': value.owningMembership,
        'owningNamespace': value.owningNamespace,
        'owningRelatedElement': value.owningRelatedElement,
        'owningRelationship': value.owningRelationship,
        'owningType': value.owningType,
        'qualifiedName': value.qualifiedName,
        'relatedElement': value.relatedElement,
        'shortName': value.shortName,
        'source': value.source,
        'target': value.target,
        'textualRepresentation': value.textualRepresentation,
        'typeDisjoined': IdentifiedToJSON(value.typeDisjoined),
    };
}

